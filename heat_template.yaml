heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying one Windows 10 (hostname cl1 and mgr) and two Windows
  Servers (hostnames dc1 and srv1). 

  Sets up AD automatically after login to Administrator account on DC1 and joins clients to AD. 
parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers

resources:
  private_net:
    type: OS::Neutron::Net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: 192.168.111.0/24
      gateway_ip: 192.168.111.1
      dns_nameservers: [192.168.111.2]
      allocation_pools:
        - start: 192.168.111.101
          end: 192.168.111.200

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: ntnu-internal

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  sec_core:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security group rules for all
      name: sec_core
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 3389
          port_range_max: 3389

  mgr:
    type: OS::Nova::Server
    properties:
      name: mgr
      image: 'Windows 10 21H2 Enterprise [Evaluation]'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: mgr_port }
      user_data_format: RAW
      user_data: |
        #ps1_sysnative  
        # 
        # Give Windows correct hostname 
        # 
        $name = (New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/hostname")
        $shortname = $name.split('.',2)[0]
      
        if ( $env:computername -ne $shortname ) {
          Rename-Computer $shortname
        }

        # 
        # Wait for LDAP setup before trying to join domain
        #
        while (!(Test-NetConnection -ComputerName 192.168.111.2 -Port 389).TcpTestSucceeded) {
        exit 1003
        }
        
        # 
        # Join domain
        # 
        $password = ConvertTo-SecureString 'P@ssw0rd123!!' -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ('Administrator', $password)
        Add-Computer -DomainName corp.contoso.com -Credential $credential  -Restart

  mgr_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups:
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  mgr_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: mgr_port }

  cl1:
    type: OS::Nova::Server
    properties:
      name: cl1
      image: 'Windows 10 21H2 Enterprise [Evaluation]'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: cl1_port }
      user_data_format: RAW
      user_data: |
        #ps1_sysnative 
        #
        # Give Windows correct hostname 
        #   
        $name = (New-Object System.Net.WebClient).DownloadString("http://169.254.169.254/latest/meta-data/hostname")
        $shortname = $name.split('.',2)[0]
      
        if ( $env:computername -ne $shortname ) {
          Rename-Computer $shortname
        }
        # 
        # Wait for LDAP setup before trying to join domain
        #
        while (!(Test-NetConnection -ComputerName 192.168.111.2 -Port 389).TcpTestSucceeded) {
          exit 1003
        }
        # 
        # Join domain
        #
        $password = ConvertTo-SecureString 'P@ssw0rd123!!' -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ('Administrator', $password)
        Add-Computer -DomainName corp.contoso.com -Credential $credential  -Restart


  cl1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  cl1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: cl1_port }

  dc1:
    type: OS::Nova::Server
    properties:
      name: dc1
      image: 'Windows Server 2022 Standard [Evaluation]'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: dc1_port }
      user_data_format: RAW
      user_data: |
        #ps1_sysnative
        #
        # Automatically sets up domain: 
        #
        Try {
        # Start the logging in the C:\DomainJoin directory
        #
        Start-Transcript -Path "C:\DomainJoin\stage1.txt"
        # Global Variables
        $password="P@ssw0rd123!!"
        # Set the Administrator Password and activate the Domain Admin Account
        #
        net user Administrator $password /logonpasswordchg:no /active:yes
        # Install the Windows features necessary for Active Directory
        # Features
        # - .NET Core
        # - Active Directory Domain Services
        # - Remote Active Directory Services
        # - DNS Services
        #
        Install-WindowsFeature NET-Framework-Core
        Install-WindowsFeature AD-Domain-Services
        Install-WindowsFeature RSAT-ADDS
        Install-WindowsFeature RSAT-DNS-Server
        # Create text block for the new script that will be ran once on reboot
        #
        $addsmodule02 = @"
        #ps1_sysnative
        Try {
        Start-Transcript -Path C:\DomainJoin\stage2.txt
        `$password = "P@ssw0rd123!!"
        `$FullDomainName = "corp.contoso.com"
        `$ShortDomainName = "CORP"
        `$encrypted = ConvertTo-SecureString `$password -AsPlainText -Force
        Import-Module ADDSDeployment
        Install-ADDSForest ``
        -CreateDnsDelegation:`$false ``
        -DatabasePath "C:\Windows\NTDS" ``
        -DomainMode "WinThreshold" ``
        -DomainName `$FullDomainName ``
        -DomainNetbiosName `$ShortDomainName ``
        -ForestMode "WinThreshold" ``
        -InstallDns:`$true ``
        -LogPath "C:\Windows\NTDS" ``
        -NoRebootOnCompletion:`$false ``
        -SysvolPath "C:\Windows\SYSVOL" ``
        -SafeModeAdministratorPassword `$encrypted ``
        -Force:`$true
        } Catch {
        Write-Host $_
        } Finally {
        Stop-Transcript
        }
        "@
        Add-Content -Path "C:\DomainJoin\ADDCmodule2.ps1" -Value $addsmodule02
        # Adding the run once job
        #
        $RunOnceKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce"
        set-itemproperty $RunOnceKey "NextRun" ('C:\Windows\System32\WindowsPowerShell\v1.0\Powershell.exe -executionPolicy Unrestricted -File ' + "C:\DomainJoin\ADDCmodule2.ps1")
        # End the logging
        #
        } Catch {
        Write-Host $_
        } Finally {
        Stop-Transcript
        }
        # Last step is to reboot the local host
        Restart-Computer -ComputerName "localhost" -Force
      
  dc1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips: [
        {
          "subnet": { get_resource: private_subnet },
          "ip_address": 192.168.111.2
        }
      ]
  dc1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: dc1_port }

  srv1:
    type: OS::Nova::Server
    properties:
      name: srv1
      image: 'Windows Server 2022 Standard [Evaluation]'
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: srv1_port }
      user_data_format: RAW
      user_data: |
        #ps1_sysnative    
        # 
        # Wait for LDAP setup before trying to join domain
        #
        while (!(Test-NetConnection -ComputerName 192.168.111.2 -Port 389).TcpTestSucceeded) {
          exit 1003
        }
        #  
        # Join domain
        #
        $password = ConvertTo-SecureString 'P@ssw0rd123!!' -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential ('Administrator', $password)
        Add-Computer -DomainName corp.contoso.com -Credential $credential  -Restart


  srv1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: 
        - default
        - { get_resource: sec_core }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
  srv1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ntnu-internal
      port_id: { get_resource: srv1_port }

outputs:
  srv1_private_ip:
    description: IP address of srv1 in private network
    value: { get_attr: [ srv1, first_address ] }
  srv1_public_ip:
    description: Floating IP address of srv1 in public network
    value: { get_attr: [ srv1_floating_ip, floating_ip_address ] }
  dc1_public_ip:
    description: Floating IP address of dc1 in public network
    value: { get_attr: [ dc1_floating_ip, floating_ip_address ] }
  cl1_private_ip:
    description: IP address of cl1 in private network
    value: { get_attr: [ cl1, first_address ] }
  cl1_public_ip:
    description: Floating IP address of cl1 in public network
    value: { get_attr: [ cl1_floating_ip, floating_ip_address ] }
  mgr_private_ip:
    description: IP address of mgr in private network
    value: { get_attr: [ mgr, first_address ] }
  mgr_public_ip:
    description: Floating IP address of mgr in public network
    value: { get_attr: [ mgr_floating_ip, floating_ip_address ] }
